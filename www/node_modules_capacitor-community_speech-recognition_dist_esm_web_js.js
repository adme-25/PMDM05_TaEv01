"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor-community_speech-recognition_dist_esm_web_js"],{

/***/ 2298:
/*!******************************************************************************!*\
  !*** ./node_modules/@capacitor-community/speech-recognition/dist/esm/web.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpeechRecognition": () => (/* binding */ SpeechRecognition),
/* harmony export */   "SpeechRecognitionWeb": () => (/* binding */ SpeechRecognitionWeb)
/* harmony export */ });
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ 5099);

class SpeechRecognitionWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {
  available() {
    throw this.unimplemented('Method not implemented on web.');
  }

  start(_options) {
    throw this.unimplemented('Method not implemented on web.');
  }

  stop() {
    throw this.unimplemented('Method not implemented on web.');
  }

  getSupportedLanguages() {
    throw this.unimplemented('Method not implemented on web.');
  }

  hasPermission() {
    throw this.unimplemented('Method not implemented on web.');
  }

  isListening() {
    throw this.unimplemented('Method not implemented on web.');
  }

  requestPermission() {
    throw this.unimplemented('Method not implemented on web.');
  }

  checkPermissions() {
    throw this.unimplemented('Method not implemented on web.');
  }

  requestPermissions() {
    throw this.unimplemented('Method not implemented on web.');
  }

}
const SpeechRecognition = new SpeechRecognitionWeb();


/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor-community_speech-recognition_dist_esm_web_js.js.map